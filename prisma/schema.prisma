generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  password  String
  updatedAt DateTime @updatedAt
  bio       String?
  avatar    String? @default("https://utfs.io/f/ec604648-73dc-45d7-97e2-2ae2b6137f89-oubu9r.jpg")

  groups         GroupMember[]
  adminOf        GroupAdmin[]
  posts          Post[]
  comments       Comment[]
  CommentLike    CommentLike[]
  PostLike       PostLike[]
  PostDislike    PostDislike[]
  CommentDislike CommentDislike[]
}

model Group {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String   @db.VarChar(255)
  avatar      String   @default("https://utfs.io/f/767e333e-24de-448c-841b-1437f70835e2-b4dc8y.png")

  GroupMember GroupMember[]
  GroupAdmin  GroupAdmin[]
  Post        Post[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  groupId   Int
  Group     Group    @relation(fields: [groupId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model GroupAdmin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  groupId   Int
  Group     Group    @relation(fields: [groupId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  authorId  Int
  groupId   Int
  author    User     @relation(fields: [authorId], references: [id])
  Group     Group    @relation(fields: [groupId], references: [id])

  PostLike    PostLike[]
  PostDislike PostDislike[]
  Comment     Comment[]
}

model Comment {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  content        String
  authorId       Int
  postId         Int
  Post           Post             @relation(fields: [postId], references: [id])
  author         User             @relation(fields: [authorId], references: [id])
  CommentLike    CommentLike[]
  CommentDislike CommentDislike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  commentId Int
  User      User     @relation(fields: [userId], references: [id])
  Comment   Comment  @relation(fields: [commentId], references: [id])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
}

model PostDislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
}

model CommentDislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  commentId Int
  User      User     @relation(fields: [userId], references: [id])
  Comment   Comment  @relation(fields: [commentId], references: [id])
}
